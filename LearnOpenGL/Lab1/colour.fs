#version 450 coreout vec4 FragColour;in vec3 Normal;in vec3 FragPos; // per fragment world positionuniform vec3 lightPos;uniform vec3 objectColour;uniform vec3 lightColour;uniform vec3 viewPos;void main(){	// Ambient	float ambientStrength = 0.1;	vec3 ambient = ambientStrength * lightColour;	// Diffuse	vec3 norm = normalize(Normal);    vec3 lightDir = normalize(lightPos - FragPos);    float diff = max(dot(norm, lightDir), 0.0);    vec3 diffuse = diff * lightColour;	//Specular	float specularStrength = 0.8;	int shininess = 32; //the higher the shininess the more direct reflection is, i.e. a smaller highlight	vec3 viewDir = normalize(viewPos - FragPos);	vec3 reflectDir = reflect(-lightDir, norm);// we negate the lightDir so the vector points from the light to the fragment	float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);	vec3 specular = specularStrength * spec * lightColour;	vec3 result = (ambient + diffuse + specular) * objectColour;	FragColour = vec4(result, 1.0);}