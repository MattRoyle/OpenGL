#version 450 coreout vec4 FragColour;struct Material {	vec3 ambient;	vec3 diffuse;	vec3 specular;	float shininess;};struct Light {	vec3 position;	vec3 ambient;	vec3 diffuse;	vec3 specular;};uniform Light light;uniform Material material;//view spacein vec3 Normal;in vec3 FragPos;uniform vec3 lightColour;void main(){	// Ambient	vec3 ambient = light.ambient * material.ambient;	// Diffuse	vec3 norm = normalize(Normal);    vec3 lightDir = normalize(light.position - FragPos);    float diff = max(dot(norm, lightDir), 0.0); //ensures non negative    vec3 diffuse =  light.diffuse * (diff * material.diffuse);	//Specular	vec3 viewDir = normalize( - FragPos); // since view is 0,0,0 this is the same as subtracting the view by position	vec3 reflectDir = reflect(-lightDir, norm);// we negate the lightDir so the vector points from the light to the fragment	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);	vec3 specular =  light.specular * (spec * material.specular) ;	vec3 result = ambient + diffuse + specular;	FragColour = vec4(result, 1.0);}