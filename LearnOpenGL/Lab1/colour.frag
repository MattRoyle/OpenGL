#version 460 coreout vec4 FragColour;struct Material {	sampler2D diffuse;	sampler2D specular;	float shininess;};struct Light {	vec3 position;	vec3 direction;	vec3 ambient;	vec3 diffuse;	vec3 specular;	float constant;	float linear;	float quadratic;};uniform Light light;uniform Material material;//view spacein vec3 Normal;in vec3 FragPos;in vec2 TexCoords;uniform vec3 lightColour;void main(){	vec3 lightDir = normalize(light.position - FragPos); //using lights position	//vec3 lightDir = normalize(-light.direction);//for a directional light	// Diffuse Calulations	vec3 norm = normalize(Normal);        float diff = max(dot(norm, lightDir), 0.0); //ensures non negative		//Specular	vec3 viewDir = normalize( - FragPos); // since view is 0,0,0 this is the same as subtracting the view by position	vec3 reflectDir = reflect(-lightDir, norm);// we negate the lightDir so the vector points from the light to the fragment	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);			vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords));	vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));	//attenuation	float distance = length(light.position - FragPos);	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));	ambient *= attenuation;	diffuse *= attenuation;	specular *= attenuation;	FragColour = vec4(ambient + diffuse + specular, 1.0);}