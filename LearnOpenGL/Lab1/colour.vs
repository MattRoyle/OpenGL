#version 450 corelayout(location = 0) in vec3 aPos; // position has attribute position 0layout (location = 1) in vec3 aNormal;//to be converted to view space and passed to the fragment shaderout vec3 FragPos;out vec3 Normal;out vec3 LightPos; uniform vec3 lightPos;// light position in world-spaceuniform mat4 model;uniform mat4 view;uniform mat4 projection;uniform mat3 normalMatrix;void main(){	FragPos = vec3(view * model * vec4(aPos, 1.0));//convert the to view space fragment positions	Normal = normalMatrix * aNormal;	LightPos = vec3(view * vec4(lightPos, 1.0)); // transform to view space	gl_Position = projection * view * model * vec4(aPos, 1.0);}